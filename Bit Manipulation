Bit MAnipualtion is an essential concept for Adavanced level problems 
It basically has 4 major operations, They are:- 1. Get Bit    2. Set Bit    3. Clear Bit    4. Update Bit
Creating a Bit Mask:-
Bit mask is an essential concept in Bit Manipulation and is used for all the aforementioned 4 options.
for Bit Mask we consider 1 (0001 in binary) and shift its binary form to obtain the desired results.

1. Get Bit (Left shift and AND):-
This is used to obtain the bit value at the given position.
ex :- for the binary 0101 the bit at position 2 is 1 and it is determined as follows

  1. First we leftshift the bitmask to the desired position (1<<2  = 100)
  2. Now we perform AND with the given number (0101 & 100 = 0100)
  3. if the obtained result is greater than 0 then the bit at the given position is 1 and if it is equal to zero then the bit is 0.
Code :-
import java.util.Scanner;
public class GetBit {
    public static void main(String[] args) {
        int n = 5 ;
        int position = 1;
        int bitmask = 1<<position;
        if((bitmask & n) > 0){
            System.out.println("Bit at position "+position+" is 1");
        }
        else{
            System.out.println("Bit at position "+position+" is 0");
        }
    }
}

2. Set Bit (LS OR)
This is to set the 0 bit at a given position to 1.
ex :- for the binary 0101 the change the 0 bit at position 1.
  1. First we leftshift the bitmask to the desired position (1<<1  = 010)
  2. Now we perform OR with the given number (0101 | 0010 = 0111)
  3. if the obtained result has a 1 in the desired position.
Code :-
import java.util.Scanner;
public class SetBit {
    public static void main(String[] args) {
        int num = 5;
        int position = 1;
        int bitmask = 1<<position;
        System.out.println(num | bitmask);//This should result in 7
    }
}

3. Clear Bit (NOT(BM) AND):-
This is used to clear the 1 bit to 0.
ex :- clear the bit at position 3 for the number 1110
  1. First we leftshift the bitmask to the desired position (1<<3  = 1000)
  2. Now we perform NOT to the bit mask so that the remaning bits reamin the same in the original number (~(1000) = 0111)
  3. Now we do the AND of updated bit mask and the given number (0111 & 1110 = 0110)
Code:- 
import java.util.Scanner;
public class ClearBit {
    public static void main(String[] args) {
        int number = 14; //1110
        int position = 3;
        int bitmask = 1<<3; //1000
        int ans = ~(bitmask) & number; //0111 AND 1110
        System.out.println(ans);// The answer should be 6
    }
}

4. Update Bit(0 to 1 and 1 to 0)
This is to update the bits from 0 to 1 and 1 to 0.

To shift from 1 to 0.
ex :- shift 1 at position 3 for the number 1110
  1. First we leftshift the bitmask to the desired position (1<<3  = 1000)
  2. Now we perform NOT to the bit mask so that the remaning bits reamin the same in the original number (~(1000) = 0111)
  3. Now we do the AND of updated bit mask and the given number (0111 & 1110 = 0110)
  
  
To shift from 0 to 1.
ex :- shift 0 at position 2 for the number 1010
  1. First we leftshift the bitmask to the desired position (1<<2  = 0100)
  2. Now we perform OR with the given number (1010 | 0100 = 1110)
Code:- 
import java.util.Scanner;

public class UpdateBit {
    public static void main(String[] args) {
        // Change 1 to 0
        int num = 14;
        int pos = 3;
        int bitmask = 1<<pos;
        System.out.println(~(bitmask) & num);
        
        //Change 0 to 1
        int num1 = 10;
        int pos1 = 2;
        int bitmask1 = 1<<pos;
        System.out.println(bitmask | num);
    } 
}














